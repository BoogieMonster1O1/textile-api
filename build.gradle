import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'textile-loom' version '0.5.1+build12' apply false
}

class Globals {
    static def baseVersion = "0.2.0"
    static def mcVersion = "inf-20100618"
    static def yarnVersion = "+build20d333"
}
version = Globals.baseVersion //+ "+" + (ENV.BUILD_NUMBER ? ("build." + ENV.BUILD_NUMBER) : "local") + "-" + getBranch()

logger.lifecycle("Building Textile: " + version)

allprojects {
    apply plugin: 'textile-loom'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = "net.textilemc.textile"

    loom {
        shareCaches = true
    }

    repositories {
        maven { url 'https://maven.concern.i.ng/' }
    }

    dependencies {
        minecraft "com.mojang:minecraft:$Globals.mcVersion"
        mappings "net.textilemc:yarrn:${Globals.mcVersion}${Globals.yarnVersion}:v2"
        modImplementation "net.fabricmc:fabric-loader:0.10.0+build.208"
    }

    configurations {
        dev
    }

    jar {
        classifier = "dev"
    }

    afterEvaluate {
        remapJar {
            input = file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar")
            archiveName = "${archivesBaseName}-${version}.jar"
        }

        artifacts {
            dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
        }

        processResources {
            inputs.property "version", project.version

            from(sourceSets.main.resources.srcDirs) {
                include "fabric.mod.json"
                expand "version": project.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude "fabric.mod.json"
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    minecraft {
        intermediaryUrl = {
            return "https://maven.concern.i.ng/net/textilemc/intermediary/" + it + "/intermediary-" + it + "-v2.jar"
        }

        clientOnly = true
    }
}

javadoc {
    options.memberLevel = "PACKAGE"
    allprojects.each {
        source(it.sourceSets.main.allJava.srcDirs)
    }
    classpath = sourceSets.main.compileClasspath
}

subprojects {
    task remapMavenJar(type: Copy, dependsOn: remapJar) {
        afterEvaluate {
            from("${project.buildDir}/libs/$archivesBaseName-${version}.jar")
            into("${project.buildDir}/libs/")
            rename {String fn -> "$archivesBaseName-${version}-maven.jar"}
        }
    }

    publishing {
        publications {
            create("${archivesBaseName}_mavenJava", MavenPublication) {
                afterEvaluate {
                    artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-maven.jar")) {
                        builtBy remapMavenJar
                    }
                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }
                }
            }
        }
    }

    javadoc.enabled = false
}

task remapMavenJar(type: RemapJarTask, dependsOn: jar) {
    afterEvaluate {
        input = file("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar")
        archiveName = "${archivesBaseName}-${version}-maven.jar"
        addNestedDependencies = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-maven.jar")) {
                builtBy remapMavenJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            pom.withXml {
                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", it.group)
                    depNode.appendNode("artifactId", it.name)
                    depNode.appendNode("version", it.version)
                    depNode.appendNode("scope", "compile")
                }
            }
        }
    }
}

task licenseFormatAll
subprojects {p -> licenseFormatAll.dependsOn("${p.path}:licenseFormat")}
subprojects.each {remapJar.dependsOn("${it.path}:remapJar")}

repositories {
    flatDir {
        dirs 'jars'
    }
    mavenCentral()
    maven { url 'https://maven.concern.i.ng/' }
}

dependencies {
    afterEvaluate {
        subprojects.each {
            compile project(path: ":${it.name}", configuration: "dev")
            include project("${it.name}:")
        }
    }

    minecraft "com.mojang:minecraft:$Globals.mcVersion"
//	mappings "net.fabricmc:yarn:${Globals.mcVersion}${Globals.yarnVersion}:v2"
    modImplementation "net.fabricmc:fabric-loader:0.10.0+build.208"
}

loom {
    shareCaches = true
}

minecraft {
    intermediaryUrl = {
        return "https://maven.concern.i.ng/net/textilemc/intermediary/" + it + "/intermediary-" + it + "-v2.jar"
    }

    clientOnly = true
}

task copyIdeaFiles(type: Copy) {
    if (file(".idea/").exists()) {
        from "idea-docs/"
        into ".idea/"
    }
}

copyIdeaFiles
